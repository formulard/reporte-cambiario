---
title: Reporte diario
execute:
  echo: false    
  warning: false 
  message: false 
  error: false   
format: 
  html:
    include-in-header: favicon.html
    css: style.css
    embed-resources: false
    anchor-sections: false
---

```{r setup}
options(box.path = here::here())

library(glue)
library(dplyr)
library(stringr)
library(htmltools)
library(reactable)
library(lubridate)

box::use(databcrd[crear_mes])

box::use(
  docs/logic/ui[summary_cards, report_table],
  docs/logic/equivalencias[entidades_infodolar, entidades_banks]
)

get_tc_from_banks <- function() {
  URL <- paste0(
    "https://raw.githubusercontent.com/",
    "Johan-rosa/webscraping-tc/refs/heads/", 
    "main/data/from_banks/_historico_from_banks.csv"
  )
  readr::read_csv(URL)
}

get_tc_infodolar <- function() {
  URL <- paste0(
    "https://raw.githubusercontent.com/",
    "Johan-rosa/webscraping-tc/refs/heads/", 
    "main/data/infodolar/_historico_infodolar.csv"
  )
  readr::read_csv(URL)
}

```

<div class="wrapper">

```{r import_data_banks, echo=FALSE}
historico_bank <- get_tc_from_banks() |>
  filter(
    # Remover una de las tasas de scotia
    is.na(tipo) |
    str_detect(tipo, "Digitales")
  ) |>
  select(-tipo) |>
  arrange(date) |>
  group_by(bank) |>
  mutate(
    gap = sell - buy,
    lag_date = lag(date),
    lag_buy = lag(buy),
    lag_sell = lag(sell),
    lag_gap = lag(gap),
    d_sell = sell - lag_sell,
    d_buy = buy - lag_buy,
  ) |>
  ungroup() |>
  rename(entidad = bank)

current_data_banks <- historico_bank |>
  filter(date == max(date), buy > 1, lag_buy > 1) |>
  left_join(entidades_banks, by = "entidad") |>
  select(-entidad) |>
  relocate(entidad = name, .after = date) |> 
  filter(lag_date == max(date) -1)
```

```{r import_data_infodolar}
historico_infodolar <- get_tc_infodolar() |>
  select(date, entidad, buy = compra, sell = venta) |>
  arrange(date) |>
  group_by(entidad) |> 
  mutate(
    gap = sell - buy,
    lag_date = lag(date),
    lag_buy = lag(buy),
    lag_sell = lag(sell),
    lag_gap = lag(gap),
    d_sell = sell - lag_sell,
    d_buy = buy - lag_buy,
  ) |> 
  ungroup()

current_data_infodolar <- historico_infodolar |>
  filter(date == max(date), buy > 1, lag_buy > 1) |>
  left_join(entidades_infodolar) |>
  select(-entidad) |>
  relocate(entidad = name, .after = date) |>
  filter(!entidad %in% unique(current_data_banks$entidad)) |>
  filter(lag_date == max(date) -1)

current_data <- current_data_banks |>
  bind_rows(current_data_infodolar)

current_summary <- current_data |>
  summarise(
    across(-c(entidad, date, lag_date, tipo_entidad), \(x) mean(x, na.rm = TRUE)),
    n_banks = n()
  )
```

```{r report_dates}
current_date <- tibble::lst(
  date = max(historico_bank$date),
  year = year(date),
  mes  = month(date),
  label_mes = crear_mes(mes, "number_to_text") |> tolower(),
  day  = day(date) |> str_pad(2, "left", "0"),
  label = glue("{day} de {label_mes} de {year}")
)

previous_date <- tibble::lst(
  date = max(historico_bank$lag_date, na.rm = TRUE),
  year = year(date),
  mes  = month(date),
  label_mes = crear_mes(mes, "number_to_text") |> tolower(),
  day  = day(date) |> str_pad(2, "left", "0"),
  label = glue("{day} de {label_mes} de {year}")
)

time_in_dr <-   Sys.time() |>
    lubridate::with_tz(tzone = "America/Santo_Domingo")
```

<header>

::: {.grid  .document-header}
::: {.g-col-12 .g-col-md-2}
<img class="logo" src="assets/formula_border 2.png">
:::
::: {.g-col-12 .g-col-md-10 .text-center .header-text}
<h1>Reporte diario del mercado cambiario</h1>
`r current_date$label`
:::
:::

<div class="hr"></div>
</header>

<main class="main-content">

```{r info_header, echo=FALSE}
div(
  class = "info-header",
  div(
    class = "info-container",
    shiny::icon("chart-simple", class = "icon"),
    "Promedio del día"
  ),
  div(
    class = "info-container",
    shiny::icon("calendar-days", class = "icon"),
    glue("Compración respecto al {previous_date$label}")
  ),
  div(
    class = "info-container",
    shiny::icon("clock", class = "icon"),
    glue("Última actualización: {format(time_in_dr, '%I:%M %p')}")
  ),
)
```

```{r stats_cards, echo=FALSE}
summary_cards(current_summary)
```

### Entidades de intermediación financiera

```{r table_eif, echo=FALSE}
eif_tasas_to_table <- current_data |>
  filter(tipo_entidad == "EIF") |>
  select(-tipo_entidad)

eif_tasas_to_table |>
  relocate(buy, .before = sell) |> 
  report_table()
```

### Agencias de cambio

```{r table_ac, echo=FALSE}
ac_tasas_to_table <- current_data |>
  filter(tipo_entidad == "AC") |>
  select(-tipo_entidad)

ac_tasas_to_table |>
  relocate(buy, .before = sell) |> 
  report_table()
```

</main>

::: {.callout-note title="Notas" appearance="simple"}
1- Para el reporte se consultan las tasas de compra y venta oficiales de las páginas web de las entidades financieras.

2- Se actualiza automáticamente en el horario siguiente: 9:30 AM, 10:30 AM, 12:30 PM, 03:30 PM y a las 50:30 PM

3- Se utilizan promedios simples a lo largo del documento; ninguna de estas medidas es ponderada.

:::

<br>
<footer>
Powered by <img src="assets/formula.png" class="logo-footer"> | info@formulard.com
</footer>

</div>

